initialize() {
	setSeed(10);
	lambda_coef = readFile("~/scratch/LambdaCoef.txt"); //Index to get the number of genes		
	lambda_coef = asInteger(lambda_coef);
	lambda = 2+lambda_coef/1000;
	num_genes = 100;
	idx_genes = num_genes-1;
	
	initializeSLiMOptions(keepPedigrees=T); // keep Pedigrees for relatedness function
	
	//	// m1 mutationtype: neutral
	initializeMutationType("m1", 0.5, "f", 0.0);
	// m2 mutationtype deleterious: schÃ¤dlich
	initializeMutationType("m2", 0.0, "f", -1.0);
	
	// g1 -> gene, g2 -> no gene
	initializeGenomicElementType("g1", c(1,2), c(0,1));
	initializeGenomicElementType("g2", 2, 0);
	m1.color = "pink";
	m2.color = "green";
	g1.color="blue";
	g2.color="#D0F0FF";
	
	start=seq(0,999,by=1);
	start=start[0:idx_genes];
	defineConstant("START", start);
	
	end=seq(0,999,by=1);
	end=end[0:idx_genes];
	defineConstant("END", end);
	
	genomicType=rep(1,num_genes);
	
	//get mutationRate comparing to standard model
	bp_old = 5267744;// bp in standard model
	all_mutRate = 1.2*10^-8/9*bp_old;
	genLen = 1; //basepairs per gene
	bp_new = num_genes*genLen; //bp in this model
	mutRate_new = all_mutRate/bp_new; //new mutationRate
	mutationRate=rep(mutRate_new,num_genes);
	mutationRate=mutationRate;
	
	// make genomic elements with special mutationrate, and so on
	for(i in seqAlong(genomicType)){
		initializeGenomicElement(genomicType[i],start[i],end[i]);
	}
	initializeMutationRate(mutationRate,end);
	
	initializeRecombinationRate(1e-8,idx_genes);
	
	//define constant
	defineConstant("N0", 500); //start populationsize
	defineConstant("lambda", lambda);
	defineConstant("simID", getSeed());
	defineConstant("Num_genes",num_genes);
	
	//two sexes
	initializeSex("A");
}

// make population with N0 individuals
1 {
	sim.addSubpop("p1", N0);
}


//------------------------------------------------------------------------------------------------------------------
//calculate number of mutationload and ill individuals, and save the data after every generation
//------------------------------------------------------------------------------------------------------------------
1 early(){ //header of table
	writeFile("~/scratch/randomResults/random_populationsize_mutationload_prevalence_"+Num_genes+"Lambda.txt", "generation,populationsize,mutationload,ill individuals", append=T);
}

1:850 {
	muts=sum(p1.individuals.countOfMutationsOfType(m2)); //number of all mutations
	mutationload=muts/p1.individualCount; //mutationload
	ills=p1.individualCount-p1.individualCount*mean(p1.cachedFitness(NULL)); //ill individuals
	writeFile("~/scratch/randomResults/random_populationsize_mutationload_prevalence_"+Num_genes+"Lambda.txt", (sim.generation +","+p1.individualCount+","+mutationload+","+ills),append=T); //save
}

//------------------------------------------------------------------------------------------------------------------
//population growth and mateChoice
//------------------------------------------------------------------------------------------------------------------

//new populationsize
early(){
	female = p1.individuals[p1.individuals.sex=="F"];
	female = female[female.fitnessScaling==1];
	if(sim.generation<=500){
		newSize = sum(rpois(length(female), N0/length(female)));
	}
	else{newSize = sum(rpois(length(female), lambda));}
	p1.setSubpopulationSize(newSize);
}

//------------------------------------------------------------------------------------------------------------------
//compound-heterozygotie
//------------------------------------------------------------------------------------------------------------------

late() {
	// Loop over individuals and figure out the fitness of each one holistically
	for (ind in p1.individuals)
	{
		// get the positions of all m2 mutations in each of the two genomes
		g1pos = ind.genome1.mutationsOfType(m2).position;
		g2pos = ind.genome2.mutationsOfType(m2).position;
		
		if ((length(g1pos) > 0) & (length(g2pos) > 0)){ // in both genomes are mutations (m2)
			
			// use sapply() to find the index of the gene for each position
			g1elem = sapply(g1pos, "whichMax(applyValue <= END);");
			g2elem = sapply(g2pos, "whichMax(applyValue <= END);");
			
			// unique down the gene indexes since multiple mutations in the same gene are irrelevant
			g1elem = unique(g1elem);
			g2elem = unique(g2elem);
			
			// find the intersection of the gene indexes hit on the two genomes
			// which genes have in both genomes the mutation m2
			elemsHitInBoth = setIntersection(g1elem, g2elem);
			
			// if a gene was hit on both genomes, fitness is 0.0 (1.0 is the default)
			if (size(elemsHitInBoth) > 0)
				ind.fitnessScaling = 0.0;
		}
	}
}
